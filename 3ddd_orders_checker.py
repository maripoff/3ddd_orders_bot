import os
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from telegram import Update, constants
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from flask import Flask
from threading import Thread
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = os.environ.get("TOKEN")
CHAT_ID = int(os.environ.get("CHAT_ID"))
CHECK_INTERVAL = int(os.environ.get("CHECK_INTERVAL", 300))
PORT = int(os.environ.get("PORT", 10000))

URLS = {
    "–í–∞–∫–∞–Ω—Å–∏–∏": "https://3ddd.ru/work/vacancies",
    "–ó–∞–∫–∞–∑—ã": "https://3ddd.ru/work/tasks",
}

# --- –ö–≠–® ---
cache = {
    "–í–∞–∫–∞–Ω—Å–∏–∏": None,
    "–ó–∞–∫–∞–∑—ã": None,
    "last_checked": {name: None for name in URLS}
}

# --- FLASK ---
app = Flask(__name__)

@app.route("/")
def index():
    return "Bot is running ‚úÖ"

def run_flask():
    app.run(host="0.0.0.0", port=PORT, threaded=False, use_reloader=False)

Thread(target=run_flask, daemon=True).start()

# --- –ü–û–õ–£–ß–ï–ù–ò–ï –ü–ï–†–í–û–ô –í–ê–ö–ê–ù–°–ò–ò/–ó–ê–î–ê–ß–ò ---
async def fetch_first_item(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as resp:
                text = await resp.text()
        soup = BeautifulSoup(text, "html.parser")
        item = soup.select_one(".work-list-item")
        if item:
            title = item.select_one("h3").get_text(strip=True)
            link = "https://3ddd.ru" + item.select_one("a")["href"]
            return f"{title}\n{link}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ fetch_first_item –¥–ª—è {url}: {e}")
    return None

# --- –ü–†–û–í–ï–†–ö–ê –°–ê–ô–¢–ê –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–≠–®–ê ---
async def check_site(bot):
    async with aiohttp.ClientSession() as session:
        for name, url in URLS.items():
            try:
                async with session.get(url, timeout=10) as resp:
                    text = await resp.text()
                soup = BeautifulSoup(text, "html.parser")
                item = soup.select_one(".work-list-item")
                if not item:
                    continue

                title = item.select_one("h3").get_text(strip=True)
                link = "https://3ddd.ru" + item.select_one("a")["href"]
                new_value = f"{title}\n{link}"

                # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                if cache[name] != new_value:
                    cache[name] = new_value
                    if cache["last_checked"][name] is not None:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
                        msg = f"üÜï <b>–ù–æ–≤–æ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ {name}:</b>\n{title}\n{link}"
                        await bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode=constants.ParseMode.HTML)
                        print(f"[{datetime.now()}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")

                cache["last_checked"][name] = datetime.now()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ check_site –¥–ª—è {name}: {e}")

# --- –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê ---
async def background_loop(bot):
    while True:
        await check_site(bot)
        await asyncio.sleep(CHECK_INTERVAL)

# --- –ö–û–ú–ê–ù–î–´ ---
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = ["‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"]
    for name, checked in cache["last_checked"].items():
        lines.append(f"{name}: {checked.strftime('%Y-%m-%d %H:%M:%S') if checked else '–µ—â—ë –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å'}")
    lines.append("\n–ù–∞–ø–∏—à–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
    await update.message.reply_text("\n".join(lines))

async def latest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = []
    for name in ["–í–∞–∫–∞–Ω—Å–∏–∏", "–ó–∞–∫–∞–∑—ã"]:
        if cache[name]:
            lines.append(f"<b>{name}:</b>\n{cache[name]}")
        else:
            lines.append(f"<b>{name}:</b>\n–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...")
    await update.message.reply_text("\n\n".join(lines), parse_mode=constants.ParseMode.HTML)

async def commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n"
        "/latest ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑/–≤–∞–∫–∞–Ω—Å–∏—é\n"
        "/commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# --- –ó–ê–ü–£–°–ö ---
async def main():
    app_bot = ApplicationBuilder().token(TOKEN).build()
    app_bot.add_handler(CommandHandler("status", status))
    app_bot.add_handler(CommandHandler("latest", latest))
    app_bot.add_handler(CommandHandler("commands", commands))

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –¥–æ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ ---
    for name, url in URLS.items():
        first_item = await fetch_first_item(url)
        if first_item:
            cache[name] = first_item
            cache["last_checked"][name] = datetime.now()

    # --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    try:
        await app_bot.bot.send_message(
            chat_id=CHAT_ID,
            text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ù–∞–ø–∏—à–∏ /commands –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )
        print("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # --- –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ ---
    asyncio.create_task(background_loop(app_bot.bot))

    # --- –ó–∞–ø—É—Å–∫ polling ---
    await app_bot.start()
    await app_bot.updater.start_polling()
    await app_bot.idle()

if __name__ == "__main__":
    asyncio.run(main())
