import os
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from telegram import constants, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from flask import Flask
from threading import Thread
from datetime import datetime
import nest_asyncio

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.environ.get("TOKEN")
CHAT_ID = int(os.environ.get("CHAT_ID"))
CHECK_INTERVAL = int(os.environ.get("CHECK_INTERVAL", 300))  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
PORT = int(os.environ.get("PORT", 10000))

URLS = {
    "–í–∞–∫–∞–Ω—Å–∏–∏": "https://3ddd.ru/work/vacancies",
    "–ó–∞–∫–∞–∑—ã": "https://3ddd.ru/work/tasks",
}

last_seen = {name: None for name in URLS}
last_checked = {name: None for name in URLS}
first_run = True  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# --- Flask ---
app = Flask(__name__)

@app.route("/")
def index():
    return "Bot is running ‚úÖ"

def run_flask():
    app.run(host="0.0.0.0", port=PORT, threaded=False, use_reloader=False)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ ---
async def check_site(bot, name, url, session):
    global first_run
    try:
        async with session.get(url, timeout=10) as response:
            text = await response.text()
        soup = BeautifulSoup(text, "html.parser")
        item = soup.select_one(".work-list-item")
        if not item:
            return

        title = item.select_one("h3").get_text(strip=True)
        link = "https://3ddd.ru" + item.select_one("a")["href"]

        if last_seen[name] != link:
            last_seen[name] = link
            if not first_run:
                msg = f"üÜï <b>–ù–æ–≤–æ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ {name}:</b>\n{title}\n{link}"
                await bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode=constants.ParseMode.HTML)
                print(f"[{datetime.now()}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
        last_checked[name] = datetime.now()
    except Exception as e:
        import traceback
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")
        print(traceback.format_exc())

# --- JobQueue ---
async def job_check(context: ContextTypes.DEFAULT_TYPE):
    bot = context.bot
    async with aiohttp.ClientSession() as session:
        for name, url in URLS.items():
            await check_site(bot, name, url, session)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_lines = ["‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"]
    for name, checked in last_checked.items():
        msg_lines.append(f"{name}: {checked.strftime('%Y-%m-%d %H:%M:%S') if checked else '–µ—â—ë –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å'}")
    msg_lines.append("\n–ù–∞–ø–∏—à–∏ /commands, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
    await update.message.reply_text("\n".join(msg_lines))

async def latest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_lines = []
    for name, link in last_seen.items():
        msg_lines.append(f"<b>{name}:</b> {link if link else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
    await update.message.reply_text("\n".join(msg_lines), parse_mode=constants.ParseMode.HTML)

async def commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∂–∏–≤ –ª–∏ –±–æ—Ç –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "/latest ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑/–≤–∞–∫–∞–Ω—Å–∏—é\n"
        "/commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    global first_run
    app_bot = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app_bot.add_handler(CommandHandler("status", status))
    app_bot.add_handler(CommandHandler("latest", latest))
    app_bot.add_handler(CommandHandler("commands", commands))

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async def send_startup_message():
        global first_run
        try:
            await app_bot.bot.send_message(
                chat_id=CHAT_ID,
                text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ù–∞–ø–∏—à–∏ /commands, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
            )
            print("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", e)
        first_run = False  # —Ç–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    await app_bot.initialize()
    await send_startup_message()

    # JobQueue
    job_queue = app_bot.job_queue
    job_queue.run_repeating(job_check, interval=CHECK_INTERVAL, first=CHECK_INTERVAL)

    # –ó–∞–ø—É—Å–∫ polling
    await app_bot.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()  # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å loop
    Thread(target=run_flask, daemon=True).start()
    asyncio.run(main())
