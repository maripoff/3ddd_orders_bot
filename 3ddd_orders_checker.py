import os
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from telegram import Update, constants
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from flask import Flask
from threading import Thread
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = os.environ.get("TOKEN")
CHAT_ID = int(os.environ.get("CHAT_ID"))
CHECK_INTERVAL = 300  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
PORT = int(os.environ.get("PORT", 10000))

URLS = {
    "–í–∞–∫–∞–Ω—Å–∏–∏": "https://3ddd.ru/work/vacancies",
    "–ó–∞–∫–∞–∑—ã": "https://3ddd.ru/work/tasks",
}

last_seen = {name: None for name in URLS}
last_checked = {name: None for name in URLS}

first_run = True  # —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

# --- FLASK –î–õ–Ø RENDER ---
app = Flask(__name__)

@app.route("/")
def index():
    return "Bot is running ‚úÖ"

def run_flask():
    app.run(host="0.0.0.0", port=PORT)

Thread(target=run_flask, daemon=True).start()

# --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –°–ê–ô–¢–ê ---
async def check_site(bot, name, url, session):
    global first_run
    try:
        async with session.get(url) as response:
            text = await response.text()
        soup = BeautifulSoup(text, "html.parser")
        item = soup.select_one(".work-list-item")
        if not item:
            return

        title = item.select_one("h3").get_text(strip=True)
        link = "https://3ddd.ru" + item.select_one("a")["href"]

        if last_seen[name] != link:
            last_seen[name] = link
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
            if not first_run:
                msg = f"üÜï <b>–ù–æ–≤–æ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ {name}:</b>\n{title}\n{link}"
                await bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode=constants.ParseMode.HTML)
                print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")

# --- –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê ---
async def main_loop(bot):
    global first_run
    async with aiohttp.ClientSession() as session:
        while True:
            for name, url in URLS.items():
                try:
                    await check_site(bot, name, url, session)
                    last_checked[name] = datetime.now()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ main_loop –¥–ª—è {name}: {e}")
            first_run = False  # –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await asyncio.sleep(CHECK_INTERVAL)

# --- –ö–û–ú–ê–ù–î–´ TELEGRAM ---
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_lines = ["‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"]
    for name, checked in last_checked.items():
        msg_lines.append(f"{name}: {checked.strftime('%Y-%m-%d %H:%M:%S') if checked else '–µ—â—ë –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–æ—Å—å'}")
    msg_lines.append("\n–ù–∞–ø–∏—à–∏ /commands, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
    await update.message.reply_text("\n".join(msg_lines))

async def latest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_lines = []
    for name, link in last_seen.items():
        msg_lines.append(f"<b>{name}:</b> {link if link else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
    await update.message.reply_text("\n".join(msg_lines), parse_mode=constants.ParseMode.HTML)

async def commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/status ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∂–∏–≤ –ª–∏ –±–æ—Ç –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
        "/latest ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑/–≤–∞–∫–∞–Ω—Å–∏—é\n"
        "/commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# --- –ó–ê–ü–£–°–ö BOT ---
async def on_startup(bot):
    try:
        await bot.send_message(
            chat_id=CHAT_ID,
            text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ù–∞–ø–∏—à–∏ /commands, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
        )
        print("–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", e)
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(main_loop(bot))

def main():
    app_bot = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app_bot.add_handler(CommandHandler("status", status))
    app_bot.add_handler(CommandHandler("latest", latest))
    app_bot.add_handler(CommandHandler("commands", commands))

    # –î–æ–±–∞–≤–ª—è–µ–º on_startup
    app_bot.post_init = lambda app: on_startup(app.bot)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–Ω–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ asyncio.run)
    app_bot.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
