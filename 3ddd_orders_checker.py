import os
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from telegram import Bot
from telegram.constants import ParseMode
from flask import Flask
from threading import Thread

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = os.environ.get("TOKEN")
CHAT_ID = int(os.environ.get("CHAT_ID"))
CHECK_INTERVAL = 300  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
PORT = int(os.environ.get("PORT", 10000))

URLS = {
    "–í–∞–∫–∞–Ω—Å–∏–∏": "https://3ddd.ru/work/vacancies",
    "–ó–∞–∫–∞–∑—ã": "https://3ddd.ru/work/tasks",
}

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = Bot(token=TOKEN)  # parse_mode —É–±—Ä–∞–ª–∏ –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
last_seen = {name: None for name in URLS}

# --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –°–ê–ô–¢–ê ---
async def check_site(name, url, session):
    try:
        async with session.get(url) as response:
            text = await response.text()
        soup = BeautifulSoup(text, "html.parser")
        item = soup.select_one(".work-list-item")
        if not item:
            return

        title = item.select_one("h3").get_text(strip=True)
        link = "https://3ddd.ru" + item.select_one("a")["href"]

        if last_seen[name] != link:
            last_seen[name] = link
            msg = f"üÜï <b>–ù–æ–≤–æ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ {name}:</b>\n{title}\n{link}"
            await bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode=ParseMode.HTML)
            print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")

# --- –û–°–ù–û–í–ù–û–ô –ê–°–ò–ù–•–†–û–ù–ù–´–ô –¶–ò–ö–õ ---
async def main_loop():
    async with aiohttp.ClientSession() as session:
        try:
            await bot.send_message(chat_id=CHAT_ID, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!", parse_mode=ParseMode.HTML)
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", e)

        while True:
            for name, url in URLS.items():
                await check_site(name, url, session)
            await asyncio.sleep(CHECK_INTERVAL)

# --- Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
app = Flask(__name__)

@app.route("/")
def index():
    return "Bot is running ‚úÖ"

def run_flask():
    app.run(host="0.0.0.0", port=PORT)

# --- –ó–ê–ü–£–°–ö ---
if __name__ == "__main__":
    Thread(target=run_flask, daemon=True).start()
    asyncio.run(main_loop())
