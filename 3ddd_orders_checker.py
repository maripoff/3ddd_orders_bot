import os
import asyncio
import aiohttp
from bs4 import BeautifulSoup
from telegram import Bot, Update
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from flask import Flask
from threading import Thread
from datetime import datetime

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = os.environ.get("TOKEN")
CHAT_ID = int(os.environ.get("CHAT_ID"))
CHECK_INTERVAL = 300  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
PORT = int(os.environ.get("PORT", 10000))

URLS = {
    "–í–∞–∫–∞–Ω—Å–∏–∏": "https://3ddd.ru/work/vacancies",
    "–ó–∞–∫–∞–∑—ã": "https://3ddd.ru/work/tasks",
}

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = Bot(token=TOKEN)
last_seen = {name: None for name in URLS}
last_check_time = None

# --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –°–ê–ô–¢–ê ---
async def check_site(name, url, session):
    global last_check_time
    try:
        async with session.get(url) as response:
            text = await response.text()
        soup = BeautifulSoup(text, "html.parser")
        item = soup.select_one(".work-list-item")
        if not item:
            return

        title = item.select_one("h3").get_text(strip=True)
        link = "https://3ddd.ru" + item.select_one("a")["href"]

        if last_seen[name] != link:
            last_seen[name] = link
            msg = f"üÜï <b>–ù–æ–≤–æ–µ –≤ —Ä–∞–∑–¥–µ–ª–µ {name}:</b>\n{title}\n{link}"
            await bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode=ParseMode.HTML)
            print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", msg)
        last_check_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {name}: {e}")

# --- –û–°–ù–û–í–ù–û–ô –ê–°–ò–ù–•–†–û–ù–ù–´–ô –¶–ò–ö–õ ---
async def main_loop():
    async with aiohttp.ClientSession() as session:
        try:
            await bot.send_message(chat_id=CHAT_ID, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!", parse_mode=ParseMode.HTML)
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", e)

        while True:
            for name, url in URLS.items():
                await check_site(name, url, session)
            await asyncio.sleep(CHECK_INTERVAL)

# --- Telegram –∫–æ–º–∞–Ω–¥—ã ---
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != CHAT_ID:
        return
    msg = "‚úÖ –Ø –∂–∏–≤–æ–π!"
    if last_check_time:
        msg += f"\n–ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check_time}"
    await update.message.reply_text(msg)

async def latest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != CHAT_ID:
        return
    async with aiohttp.ClientSession() as session:
        messages = []
        for name, url in URLS.items():
            try:
                async with session.get(url) as response:
                    text = await response.text()
                soup = BeautifulSoup(text, "html.parser")
                item = soup.select_one(".work-list-item")
                if item:
                    title = item.select_one("h3").get_text(strip=True)
                    link = "https://3ddd.ru" + item.select_one("a")["href"]
                    messages.append(f"<b>{name}:</b> {title}\n{link}")
                else:
                    messages.append(f"<b>{name}:</b> –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            except Exception as e:
                messages.append(f"<b>{name}:</b> –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        await update.message.reply_text("\n\n".join(messages), parse_mode=ParseMode.HTML)

# --- Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ---
app = Flask(__name__)

@app.route("/")
def index():
    return "Bot is running ‚úÖ"

def run_flask():
    app.run(host="0.0.0.0", port=PORT)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    Thread(target=run_flask, daemon=True).start()

    # Telegram –±–æ—Ç —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥
    app_builder = ApplicationBuilder().token(TOKEN).build()
    app_builder.add_handler(CommandHandler("status", status))
    app_builder.add_handler(CommandHandler("latest", latest))

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞
    async def runner():
        asyncio.create_task(main_loop())
        await app_builder.initialize()
        await app_builder.start()
        await app_builder.updater.start_polling()
        await app_builder.idle()

    asyncio.run(runner())
